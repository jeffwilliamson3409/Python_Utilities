# initialize local git repository
git init

# add remote repository on top of local
git remote add origin https://[PROJECT_PATH].git

# stage local files for commit
git add *

# commit files to local repository
git commit -m "message"

# create branch
git branch branchName

# checkout branch
git checkout branchName

# git push to remote
git push -u origin branchName

# merge branch
git merge branchName

# delete local branch
git branch -d branchName

# delete remote branch
git push origin --delete <branch_name>

# clone a repository
$ git clone https://[PROJECT_PATH].git

# list files in project
git ls-files

***********************************************************************************************************************
Keep branch in syc with master(BSIG-development)

git checkout BSIG-development
git pull
git checkout jwilliamson-dev
git merge BSIG-development
to keep jwilliamson-dev in sync with BSIG-development

then when you're ready to put jwilliamson-dev into BSIG-development, first merge in BSIG-development like above, then ...

git checkout BSIG-development
git merge jwilliamson-dev
git push -u origin BSIG-development
and thats it.

the assumption here is that jwilliamson-dev is a topic branch with work that isn't ready to go into your main branch yet. So only merge into BSIG-development when jwilliamson-dev is in a good place
***********************************************************************************************************************

# keep working branch in sync with main branch
git checkout TTFAR-814
git pull origin BSIG-development
